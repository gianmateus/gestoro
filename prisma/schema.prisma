// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User management - Gerenciamento de usuários
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("USER") // ADMIN, MANAGER, USER
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations with restaurants - Relações com restaurantes
  restaurants Restaurant[]

  // Relations with financial records - Relações com registros financeiros
  accountsPayable    AccountPayable[]
  accountsReceivable AccountReceivable[]
  inventoryItems     InventoryItem[]
  purchases          Purchase[]
  calendarEvents     CalendarEvent[]
  payments           Payment[] // Pagamentos do cliente
  
  @@map("users")
}

model Restaurant {
  id          String   @id @default(cuid())
  name        String
  description String?
  address     String
  phone       String?
  email       String?
  logo        String?
  color       String?  @default("#d96d62")
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations - Relações
  owner              User                @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  accountsPayable    AccountPayable[]
  accountsReceivable AccountReceivable[]
  inventoryItems     InventoryItem[]
  purchases          Purchase[]
  calendarEvents     CalendarEvent[]

  @@map("restaurants")
}

// Accounts Payable - Contas a Pagar
model AccountPayable {
  id            String    @id @default(cuid())
  description   String
  amount        Decimal
  dueDate       DateTime
  paidDate      DateTime?
  status        String    @default("PENDING") // PENDING, PAID, OVERDUE, CANCELLED
  category      String    // RENT, UTILITIES, FOOD_SUPPLIES, etc.
  vendor        String?
  notes         String?
  attachments   String?   // JSON string of file paths
  userId        String
  restaurantId  String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations - Relações
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  @@map("accounts_payable")
}

// Accounts Receivable - Contas a Receber
model AccountReceivable {
  id            String    @id @default(cuid())
  description   String
  amount        Decimal
  dueDate       DateTime
  receivedDate  DateTime?
  status        String    @default("PENDING") // PENDING, PAID, OVERDUE, CANCELLED
  category      String    // SALES, CATERING, DELIVERY, EVENTS, OTHER
  customer      String?
  notes         String?
  attachments   String?   // JSON string of file paths
  userId        String
  restaurantId  String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations - Relações
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  @@map("accounts_receivable")
}

// Inventory Management - Gerenciamento de Inventário
model InventoryItem {
  id           String        @id @default(cuid())
  name         String
  description  String?
  category     String
  unit         String
  quantity     Decimal
  minQuantity  Decimal
  maxQuantity  Decimal?
  costPrice    Decimal
  sellPrice    Decimal?
  supplier     String?
  location     String?
  stockType    String        @default("RAW_MATERIAL") // RAW_MATERIAL, FINISHED_PRODUCT, etc.
  expiryDate   DateTime?
  notes        String?
  userId       String
  restaurantId String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relations - Relações
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant   Restaurant     @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  purchaseItems PurchaseItem[]
  
  @@map("inventory_items")
}

// Purchase Management - Gerenciamento de Compras
model Purchase {
  id           String         @id @default(cuid())
  orderNumber  String         @unique
  supplier     String
  orderDate    DateTime
  deliveryDate DateTime?
  status       String         @default("PENDING") // PENDING, CONFIRMED, DELIVERED, CANCELLED
  totalAmount  Decimal
  notes        String?
  attachments  String?        // JSON string of file paths
  userId       String
  restaurantId String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Relations - Relações
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant Restaurant     @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  items      PurchaseItem[]
  
  @@map("purchases")
}

model PurchaseItem {
  id            String  @id @default(cuid())
  quantity      Decimal
  unitPrice     Decimal
  totalPrice    Decimal
  purchaseId    String
  inventoryId   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations - Relações
  purchase  Purchase      @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  inventory InventoryItem @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  
  @@map("purchase_items")
}

// Calendar Events - Eventos do Calendário
model CalendarEvent {
  id           String          @id @default(cuid())
  title        String
  description  String?
  startDate    DateTime
  endDate      DateTime
  type         String          // MEETING, DELIVERY, MAINTENANCE, etc.
  priority     String          @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  location     String?
  attendees    String?         // JSON string of attendees
  reminders    String?         // JSON string of reminder dates
  completed    Boolean         @default(false)
  notes        String?
  userId       String
  restaurantId String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  // Relations - Relações
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("calendar_events")
}

// Payment Management - Controle de Pagamentos dos Clientes
model Payment {
  id           String    @id @default(cuid())
  clientId     String    // ID do cliente (usuário)
  clientName   String    // Nome do cliente
  clientEmail  String    // Email do cliente
  amount       Decimal   // Valor do pagamento
  dueDate      DateTime  // Data de vencimento
  paidDate     DateTime? // Data do pagamento (null se não pago)
  paymentMethod String?  // CASH, BANK_TRANSFER, PIX, etc.
  status       String    @default("PENDING") // PENDING, PAID, OVERDUE, CANCELLED
  type         String    // LICENSE, MONTHLY, SETUP, etc.
  description  String    // Descrição do pagamento
  notes        String?   // Observações
  referenceMonth String? // Mês de referência para mensalidades
  receiptNumber String? // Número do recibo
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations - Relações
  client User @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  @@map("payments")
} 